##只有tcp才有拥塞控制，udp没有
##传统拥塞控制算法reno/cubic
#先假设一个速度（数据包）阈值，在数据包没到达阈值前是成倍增加，而到达阈值后每次只是单个增加，当出现丢包情况时，速度立马降下来（几乎为0），然后再重复之前的状态
#那么这种算法容易误判（丢包不一定是拥堵，有可能是误码等原因），对带宽利用率低
##所以出现了Google开发的新算法BBQ
#这种算法会动态观测你的速率与延迟
#首先它会让你的速度一直保持一个稳定的阈值（速率），同时观测你的延迟是否增加，如果延迟速率没有增加，它会突然加大速率然后降低回稳定值，如果延迟没有加大，
#它会直接将速率提升到加大值并作为新的稳定阈值，如果延迟增加了，它就继续保持原来稳定值不变。以此类推来不断加大，如果延迟突然增加，它会少量降低阈值（稳定值）来跑

##相关指令
#查询当前系统使用的拥塞控制算法
sysctl net.ipv4.tcp_congestion_control
#开启BBR拥塞控制算法
echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
sysctl -p
